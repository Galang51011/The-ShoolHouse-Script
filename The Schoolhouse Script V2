local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("The ShoolHouse", "DarkTheme")
local Tab = Window:NewTab("Main")
local Section = Tab:NewSection("All Hack")

_G_SkipQuestion = false

local player = game:GetService("Players").LocalPlayer
local gui = player:WaitForChild("PlayerGui")

gui.ChildAdded:Connect(function(child: Instance) 
	if child.Name == "ThinkPad" or child.Name == "ThinkPadFT" then
		if _G_SkipQuestion then
			repeat
				wait()
			until child:WaitForChild("Frame"):WaitForChild("LocalScript"):WaitForChild("Notebook").Value ~= nil
			game.ReplicatedStorage.GameEvents.Notebook:FireServer("Pass",child:WaitForChild("Frame"):WaitForChild("LocalScript"):WaitForChild("Notebook").Value)
			child:Destroy()
		end
	end
end)

Section:NewButton("Get Notebooks", "Get 1 notebook", function()
	game.ReplicatedStorage.GameEvents.Notebook:FireServer("Pass",workspace.Map.MapData.Notebooks.Notebook)
end)

Section:NewButton("Get All Notebooks", "Get All notebook", function()
	for i,v in pairs(workspace.Map.MapData.Notebooks:GetChildren()) do
		game.ReplicatedStorage.GameEvents.Notebook:FireServer("Pass",v)
	end
end)

Section:NewButton("Shoot BSoda", "Shoot BSoda To Baldi", function()
	game:GetService("ReplicatedStorage").GameEvents.ShootSoda:FireServer("B-Soda")
end)

Section:NewButton("Free From School Lair", "Free From School Lair", function()
	game:GetService("ReplicatedStorage").GameEvents.FreePlayerFromLair:FireServer()
end)

_G_LoopLair = false

Section:NewToggle("Auto Free From School Lair", "Automatic Free From School Lair", function(va)
	if va then
		_G_LoopLair = true
		while _G_LoopLair do wait(2)
			game:GetService("ReplicatedStorage").GameEvents.FreePlayerFromLair:FireServer()
			workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
		end
	else
		_G_LoopLair = true
	end
end)

Section:NewToggle("Skip Question", "Skip Pretest Math And Pop Quiz", function(va)
	if va then
		_G_SkipQuestion = true
	else
		_G_SkipQuestion = false
	end
end)
local Tab = Window:NewTab("Items")
local Section = Tab:NewSection("Items")

local itemfolder:Folder
local itemlist = {}


local update_dropdownEvent = Instance.new("BindableEvent",workspace)

local targetitems:BasePart = nil

local dropdown_items = Section:NewDropdown("Items List", "All Items",itemlist,function(currentOption)
	targetitems = itemfolder:FindFirstChild(currentOption)
	update_dropdownEvent:Fire()
end)

local button_bringitems = Section:NewButton("Bring Unknown","Bring Items",function()
	if targetitems == nil then
		return
	end
	local character = player.Character
	if character == nil then
		return
	end
	local rootpart:BasePart = character:FindFirstChild("HumanoidRootPart")
	if rootpart == nil then
		return
	end
	targetitems.Position = rootpart.Position
end)

local button_teleportitems = Section:NewButton("Tp Unknown","Teleport To Items",function()
	if targetitems == nil then
		return
	end
	local character = player.Character
	if character == nil then
		return
	end
	local rootpart:BasePart = character:FindFirstChild("HumanoidRootPart")
	if rootpart == nil then
		return
	end
	rootpart.Position = targetitems.Position
end)

if workspace:FindFirstChild("Map") ~= nil and workspace:FindFirstChild("Map"):FindFirstChild("MapData") ~= nil and workspace:FindFirstChild("Map"):FindFirstChild("MapData"):FindFirstChild("Items") ~= nil then
	itemfolder = workspace:FindFirstChild("Map"):FindFirstChild("MapData"):FindFirstChild("Items")
	for _,items in ipairs(itemfolder:GetChildren()) do
		if items:IsA("BasePart") then
			table.insert(itemlist,items.Name)
		end
	end

	itemfolder.ChildAdded:Connect(function(child: Instance)
		if child:IsA("BasePart") then
			table.insert(itemlist,child.Name)
			dropdown_items:Refresh(itemlist)
		end
	end)

	itemfolder.ChildRemoved:Connect(function(child: Instance)
		if child:IsA("BasePart") then
			local index = table.find(itemlist,child.Name)
			if index ~= nil then
				table.remove(itemlist,index)
				dropdown_items:Refresh(itemlist)
			end
		end
	end)
end

update_dropdownEvent.Event:Connect(function(...: any)
	if targetitems ~= nil then
		button_bringitems:UpdateButton("Get ".. targetitems.Name)
		button_teleportitems:UpdateButton("Tp ".. targetitems.Name)
	else
		button_bringitems:UpdateButton("Get Unknown")
		button_teleportitems:UpdateButton("Tp Unknown")
	end
end)

local Tab = Window:NewTab("Players")
local Section = Tab:NewSection("Players")

local playerlist = {}

for i,v in pairs(game:GetService("Players"):GetPlayers()) do
	if v ~= player then
		table.insert(playerlist,v.Name)
	end
end

local target_dropdown:Player = nil

local update_dropdownEvent = Instance.new("BindableEvent",workspace)

local dropdown_player = Section:NewDropdown("Player List", "All Player",playerlist,function(currentOption)
	target_dropdown = game:GetService("Players"):FindFirstChild(currentOption)
	update_dropdownEvent:Fire()
end)

local button_killtarget = Section:NewButton("Kill Unknown","Kill Target",function()
	if target_dropdown == nil then
		return
	end
	local character_target = target_dropdown.Character
	if character_target then
		local head = character_target:FindFirstChild("Head")
		if head then
			game.ReplicatedStorage.GameEvents.Notebook:FireServer("Pass",head)
		end
		local torso = character_target:FindFirstChild("Torso")
		if torso then
			game.ReplicatedStorage.GameEvents.Notebook:FireServer("Pass",torso)
		end
	end
end)

local button_kicktarget = Section:NewButton("Kick Unknown","Kick Target",function()
	if target_dropdown == nil then
		return
	end
	game.ReplicatedStorage.GameEvents.Notebook:FireServer("Pass",target_dropdown)
end)

local button_killall = Section:NewButton("Kill All","Kill All Players",function()
	for _,tar in pairs(game:GetService("Players"):GetPlayers()) do
		local character_target = tar.Character
		if character_target then
			local head = character_target:FindFirstChild("Head")
			if head then
				game.ReplicatedStorage.GameEvents.Notebook:FireServer("Pass",head)
			end
			local torso = character_target:FindFirstChild("Torso")
			if torso then
				game.ReplicatedStorage.GameEvents.Notebook:FireServer("Pass",torso)
			end
		end
	end
end)

local button_kickall = Section:NewButton("Kick All","Kick All Players",function()
	for _,tar in pairs(game:GetService("Players"):GetPlayers()) do
		game.ReplicatedStorage.GameEvents.Notebook:FireServer("Pass",tar)
	end
end)

local button_killothers = Section:NewButton("Kill Others","Kill Others Players",function()
	for _,tar in pairs(game:GetService("Players"):GetPlayers()) do
		if tar ~= player then
			local character_target = tar.Character
			if character_target then
				local head = character_target:FindFirstChild("Head")
				if head then
					game.ReplicatedStorage.GameEvents.Notebook:FireServer("Pass",head)
				end
				local torso = character_target:FindFirstChild("Torso")
				if torso then
					game.ReplicatedStorage.GameEvents.Notebook:FireServer("Pass",torso)
				end
			end
		end
	end
end)

local button_kickothers = Section:NewButton("Kick Others","Kick Others Players",function()
	for _,tar in pairs(game:GetService("Players"):GetPlayers()) do
		if tar ~= player then
			game.ReplicatedStorage.GameEvents.Notebook:FireServer("Pass",tar)
		end
	end
end)

update_dropdownEvent.Event:Connect(function(...: any)
	if target_dropdown ~= nil then
		button_killtarget:UpdateButton("Kill ".. target_dropdown.Name)
		button_kicktarget:UpdateButton("Kick ".. target_dropdown.Name)
	else
		button_killtarget:UpdateButton("Kill Unknown")
		button_kicktarget:UpdateButton("Kick Unknown")
	end
end)

game:GetService("Players").PlayerAdded:Connect(function(v: Player) 
	table.insert(playerlist,v.Name)
	dropdown_player:Refresh(playerlist)
end)

game:GetService("Players").PlayerRemoving:Connect(function(v: Player) 
	local index = table.find(playerlist,v.Name)
	if index ~= nil then
		table.remove(playerlist,index)
		dropdown_player:Refresh(playerlist)
	end
end)

local Tab = Window:NewTab("Setting")
local Section = Tab:NewSection("Setting")
Section:NewKeybind("KeybindText", "KeybindInfo", Enum.KeyCode.RightControl, function()
	Library:ToggleUI()
end)
